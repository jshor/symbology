import{_ as a,r as i,o as r,c as l,a as e,e as n,b as o,d as s}from"./app.e282f157.js";const d={},c=e("h1",{id:"development",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#development","aria-hidden":"true"},"#"),n(" Development")],-1),h={href:"https://github.com/zint/zint",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"zintVersion",-1),p=e("code",null,"package.json",-1),b=e("h2",{id:"source-code-management",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#source-code-management","aria-hidden":"true"},"#"),n(" Source code management")],-1),m=e("code",null,"yarn install",-1),g=e("code",null,".zint",-1),_={href:"https://github.com/jshor/symbology/blob/master/binding.gyp",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"binding.gyp",-1),v={href:"https://github.com/jshor/symbology/blob/master/src/binding/main.cpp",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"src/binding/main.cpp",-1),y=e("code",null,".node",-1),w={href:"https://github.com/jshor/symbology/blob/master/src/index.js",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"src/index.js",-1),j=s("<p>Once <code>.zint</code> is created, the same install script will then apply a small number of patches to some Zint source files to adapt it to the following needs:</p><ul><li>Add <code>rendered_data</code> as a char array to be populated with raw string output.</li><li>Update <code>svg.c</code> and <code>ps.c</code> to write to the <code>rendered_data</code> buffer instead of <code>stdout</code>.</li><li>Replace <code>malloc.h</code> references with <code>stdlib.h</code> for cross-compatibility.</li></ul>",2),T={href:"https://github.com/jshor/symbology/blob/master/scripts/install.js",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"scripts/install.js",-1),C={href:"https://github.com/jshor/symbology/blob/master/scripts/patches.js",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"scripts/patches.js",-1),G=e("h2",{id:"utilization-of-nan",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#utilization-of-nan","aria-hidden":"true"},"#"),n(" Utilization of Nan")],-1),I={href:"https://github.com/nodejs/nan",target:"_blank",rel:"noopener noreferrer"},S=e("h2",{id:"building-the-project",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#building-the-project","aria-hidden":"true"},"#"),n(" Building the project")],-1),A={href:"https://github.com/mapbox/node-pre-gyp",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"node-pre-gyp",-1),U=e("p",null,[n("Upon installation of dependencies, "),e("code",null,"node-pre-gyp build"),n(" will be run, which will compile the project from source.")],-1),V=e("h3",{id:"building-on-windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#building-on-windows","aria-hidden":"true"},"#"),n(" Building on Windows")],-1),L={href:"https://docs.microsoft.com/en-us/windows/wsl/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/felixrieseberg/windows-build-tools#windows-build-tools",target:"_blank",rel:"noopener noreferrer"},E=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> <span class="token parameter variable">--production</span> windows-build-tools <span class="token parameter variable">--vs2017</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> msvs_version <span class="token number">2017</span> â€“global
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This install takes a while, but once it&#39;s complete, you can move on to <a href="#creating-a-build">Creating a build</a> below.</p><h3 id="creating-a-build" tabindex="-1"><a class="header-anchor" href="#creating-a-build" aria-hidden="true">#</a> Creating a build</h3><p>To create a packaged build, run:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> package:binary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="running-tests" tabindex="-1"><a class="header-anchor" href="#running-tests" aria-hidden="true">#</a> Running tests</h3>`,6),H=e("code",null,"*.test.js",-1),O={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},W=s(`<p>Both <strong>unit</strong> and <strong>e2e</strong> tests are written for this project. To run all tests:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests" aria-hidden="true">#</a> Unit tests</h4><p>Unit tests are specified in the <code>__tests__</code> subdirectories under <code>src</code>.</p><p>To run unit tests:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> test:unit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),q={href:"https://app.codecov.io/gh/jshor/symbology",target:"_blank",rel:"noopener noreferrer"},D=e("h4",{id:"e2e-tests",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#e2e-tests","aria-hidden":"true"},"#"),n(" e2e tests")],-1),P=e("code",null,"test/e2e",-1),Z={href:"https://github.com/americanexpress/jest-image-snapshot",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"createImageFile",-1),J=s(`<p>To run e2e tests:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> test:e2e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="committing" tabindex="-1"><a class="header-anchor" href="#committing" aria-hidden="true">#</a> Committing</h2>`,3),K={href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"standard-changelog",-1),Q={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"commitizen",-1),Y={href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"commitlint",-1),ee=e("h2",{id:"versioning",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#versioning","aria-hidden":"true"},"#"),n(" Versioning")],-1),ne={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},te={href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"},oe=e("code",null,"standard-version",-1),se={href:"https://github.com/jshor/symbology/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"CHANGELOG.md",-1),ie=e("h2",{id:"automated-builds-and-ci",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#automated-builds-and-ci","aria-hidden":"true"},"#"),n(" Automated builds and CI")],-1),re=e("p",null,"GitHub Actions will automatically build and test pull requests. At least one admin PR approval and all status checks are required to merge a PR.",-1),le=e("p",null,"The following status checks are implemented:",-1),de=e("ul",null,[e("li",null,"Successful Windows builds (AppVeyor)"),e("li",null,"Successful Linux and macOS builds (Travis)"),e("li",null,"Sufficient code coverage (threshold >90%)")],-1),ce={href:"https://github.com/bchr02/node-pre-gyp-github",target:"_blank",rel:"noopener noreferrer"},he=e("code",null,"node-pre-gyp-github",-1),ue=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"Important"),e("p",null,[n("The package version is automatically updated. "),e("strong",null,"Do not change any version references in this project.")])],-1),pe=e("h2",{id:"contributing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#contributing","aria-hidden":"true"},"#"),n(" Contributing")],-1),be={href:"https://github.com/jshor/symbology/blob/master/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"};function me(ge,_e){const t=i("ExternalLinkIcon");return r(),l("div",null,[c,e("p",null,[n("This module is a C++ wrapper around the "),e("a",h,[n("Zint barcode library"),o(t)]),n(". The version of zint that will be used will be determined by the git reference stored in the "),u,n(" field of "),p,n(".")]),b,e("p",null,[n("Upon installation of dependencies ("),m,n("), a copy of the Zint source repo will be cloned in the Git-ignored "),g,n(" directory, and its relevant C source files are referenced in "),e("a",_,[f,o(t)]),n(", along with "),e("a",v,[k,o(t)]),n(". The compiled "),y,n(" module is then available for use by the JavaScript source, in "),e("a",w,[x,o(t)]),n(".")]),j,e("p",null,[n("See "),e("a",T,[z,o(t)]),n(" and "),e("a",C,[N,o(t)]),n(" for more info.")]),G,e("p",null,[n("This project utilizes "),e("a",I,[n("Nan"),o(t)]),n(" to make the project backwards-compatible and make bindings future-proof.")]),S,e("p",null,[n("Builds are created using "),e("a",A,[B,o(t)]),n(".")]),U,V,e("p",null,[n("If you're using Windows (excluding "),e("a",L,[n("WSL"),o(t)]),n("), then you'll need to install "),e("a",R,[n("windows-build-tools"),o(t)]),n(" to compile the native Node module.")]),E,e("p",null,[n("Tests are written as "),H,n(" and utilize "),e("a",O,[n("Jest"),o(t)]),n(".")]),W,e("p",null,[n("Test coverage results are sent to "),e("a",q,[n("Codecov"),o(t)]),n(".")]),D,e("p",null,[n("e2e tests are specified in the "),P,n(" directory. They utilize "),e("a",Z,[n("jest-image-snapshot"),o(t)]),n(" for comparisons of barcode images in tandem with the helper test method, "),F,n(".")]),J,e("p",null,[n("Commit message standards abide by "),e("a",K,[M,o(t)]),n(". This module utilizes "),e("a",Q,[X,o(t)]),n(" as a devDependency to help developers write their commits, and commit messages are enforced using "),e("a",Y,[$,o(t)]),n(".")]),ee,e("p",null,[n("This package abides by the "),e("a",ne,[n("semver standard"),o(t)]),n(". "),e("a",te,[oe,o(t)]),n(" will automatically update "),e("a",se,[ae,o(t)]),n(" and bump the version.")]),ie,re,le,de,e("p",null,[n("Upon the successful merge of a PR, CI will create an automated release of the binaries on GitHub (via "),e("a",ce,[he,o(t)]),n("), publish to npm, and push the updated changelog and version bump changes to GitHub.")]),ue,pe,e("p",null,[n("All constructive feedback and pull request changes are welcome. For more information on contributing to this project, please see the "),e("a",be,[n("Contributing Guidelines"),o(t)]),n(".")])])}const ve=a(d,[["render",me],["__file","development.html.vue"]]);export{ve as default};
